# docker-compose.dev.yml
version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketing_network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: marketing_finance_dev
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - marketing_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://admin:dev_password@postgres:5432/marketing_finance_dev
      - REDIS_URL=redis://redis:6379
      - FRED_API_KEY=${FRED_API_KEY}
      - ALPHA_VANTAGE_KEY=${ALPHA_VANTAGE_KEY}
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./src:/app/src:ro
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - marketing_network
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
      - ENVIRONMENT=development
    depends_on:
      - api
    volumes:
      - ./frontend:/app/frontend:ro
    networks:
      - marketing_network

networks:
  marketing_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
